# -*- coding: utf-8 -*-
"""find the integral value using monte  carlo simulation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/147LTwIGMT-pGMlC3EYcUvz1N75dqz7XP
"""

# initializing values for drawing lower right circle
import random
import numpy as np
import matplotlib.pyplot as plt
import math
x_point=[]
y_point=[]
for x in np.linspace(2,6,1000):
  x_point.append(x)
  y=(3*(x**2)-7)
  y_point.append(y)
# variable initialization
hits=0
x_min=2
x_max=6
y_min=0
y_max=101
pi=3.1416
s=(x_max-x_min)*y_max
hitx=[]
hity=[]
nohitx=[]
nohity=[]
trial_no=1000
for i in range(trial_no):
  xrand=random.uniform(x_min,x_max)
  yrand=random.uniform(y_min,y_max)
  dist=(3*(xrand**2)-7)
  if yrand<=dist:
    hits=hits+1
    hitx.append(xrand)
    hity.append(yrand)
  else:
    nohitx.append(xrand)
    nohity.append(yrand)
# experimental Integral value calculation
exI=(hits*s)/trial_no
print("Experimental value of Integral is: ",exI)
# graph plotting
plt.plot(hitx,hity,'go')
plt.plot(nohitx,nohity,'ro')
plt.plot(x_point,y_point)